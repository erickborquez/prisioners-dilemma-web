import { Box, Flex, Spinner, Text } from "@chakra-ui/react";
import Head from "next/head";
import { useEffect, useState } from "react"

import { ActorPlayer, ActorStrategyType, ActorType } from "@/actor/type"
import { SoloStrategyGameComponent } from "@/game/component/SoloStrategyGame";
import { SoloStrategyGame } from "@/game/SoloStrategyGame";
import { useObservable } from "@/util/hook/useObservable";
import { delay } from "@/util/async";
import { useAsyncStatus } from "@/util/hook/useAsyncStatus";

// ********************************************************************************
// TODO: use non-hardcoded data
const actorPlayer: ActorPlayer = {
  id: 'player',
  type: ActorType.Player,

  name: 'TÃº',
};

const gameSpecs = [
  ActorStrategyType.SecondByBlack
].map((strategy, index) => ({
  actors: [actorPlayer, {
    id: 'strategy',
    type: ActorType.Strategy,

    name: strategy,
    strategy,
  }],

  maxRounds: 50,

  splitSplitPoints: 3,
  splitTakePoints: 0,
  takeSplitPoints: 5,
  takeTakePoints: 1,
}));

// ********************************************************************************
export default function Home() {
  const [index, setIndex] = useState(0);

  const [newGameStatus, setNewGameStatus] = useAsyncStatus();

  const [game, setGame] = useState<SoloStrategyGame | null/*no active game*/>(null/*initially none*/);
  const [state] = useObservable('SoloStrategyGameComponent', () => game ?  game.onState$() : null, [game]);
  
  useEffect(() => {
    const load = async () => {
      await delay(Math.min(4000/*4s*/, Math.random() * 10000/*10s*/));
      
      // invalid state, no more games to play
      if(index >= gameSpecs.length) {
        setNewGameStatus('error');
        return/*nothing else to do*/;
      }/** else -- valid spec */
      
      const gameSpec = gameSpecs[index];
      setGame(new SoloStrategyGame(gameSpec));
      
      setNewGameStatus('complete');
    }

    load();
  }, [index, setNewGameStatus])

  const canRestart = index < gameSpecs.length;
  const handleRestart = async () => {
    setNewGameStatus('loading');

    // stuck player indefinitely since there is no more artificial players to play
    // against
    if(!canRestart) return/*nothing else to do*/;
    setIndex(index + 1);
  };

  return (
    <>
      <Head>
        <title>Dilema del Prisionero</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Box width='100%' maxWidth='500px' margin='auto' padding='20vh 24px 0 24px' >
          {newGameStatus !== 'complete' ? (
            <Flex direction='column' alignItems='center' textAlign='center' gap='32px'>
              <Text fontSize='32px' color='#555'>Buscando un contrincante</Text>
              <Spinner size='lg'/>
            </Flex>
          ) : state && game && (
            <SoloStrategyGameComponent
              game={game}
              state={state}
              actorPlayerId={actorPlayer.id}

              onRestart={handleRestart}
            />
          )}
        </Box>
      </main>
    </>
  );
}
